# Allow established packets (hopefully) belonging to flows which are not being synced yet (rate limited to prevent DoS)
ip6tables -A forwarding_uplink_rule -p tcp -m tcp --tcp-flags ACK ACK -m limit --limit {{ untracked_flows_tcp_ack_rate }}/sec --limit-burst {{ untracked_flows_tcp_ack_burst }} -m comment --comment "Allow established connections which not made it in the conntrack sync yet" -j ACCEPT
ip6tables -A forwarding_uplink_rule -p tcp -m tcp --tcp-flags RST RST -m limit --limit {{ untracked_flows_tcp_rst_rate }}/sec --limit-burst {{ untracked_flows_tcp_rst_burst }} -m comment --comment "Allow established connections which not made it in the conntrack sync yet" -j ACCEPT

# Provide a rule to lookup the packets which were dropped because they were more than the limit.
# lookup via `ip6tables -nvL | grep exceeded`
ip6tables -A forwarding_uplink_rule -p tcp -m tcp --tcp-flags ACK ACK -m comment --comment "Limit exceeded ACK"
ip6tables -A forwarding_uplink_rule -p tcp -m tcp --tcp-flags RST RST -m comment --comment "Limit exceeded RST"


{% set mss_clamp_oifs = [uplink['ifname']] %}
{% for gateway in groups['role_uplink_gateway'] | difference([inventory_hostname]) %}
  {{ mss_clamp_oifs.append('gre4-' + hostvars[gateway]['gre_tunnel_alias']) }}
{% endfor %}


{%- for oif in mss_clamp_oifs %}
ip6tables -A forwarding_rule -o {{ oif }} -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1416
{% endfor %}


# Redirect conntrackd to samplicator which listens at port 2000
iptables -t nat -I OUTPUT -p udp -o lo --dport {{ conntrackd_port }} -j REDIRECT --to-ports 2000

